# -*- coding: utf-8 -*-
"""
Created on Sat Mar  5 20:29:55 2016

@author: John
"""

import json
from nltk.tokenize import word_tokenize
import re
from collections import Counter
import string
from nltk.corpus import stopwords
from nltk import bigrams, pos_tag
from collections import defaultdict
import operator

punctuation = list(string.punctuation)

stop = stopwords.words('english') + punctuation + ['rt', 'via', 'RT', '…', 'en', '☘', '"' ]

emoticons_str = r"""
    (?:
        [:=;] # Eyes
        [oO\-]? # Nose (optional)
        [D\)\]\(\]/\\OpP] # Mouth
    )"""

regex_str = [
    emoticons_str,
    r'<[^>]+>', # HTML tags
    r'(?:@[\w_]+)', # @-mentions
    r"(?:\#+[\w_]+[\w\'_\-]*[\w_]+)", # hash-tags
    r'http[s]?://(?:[a-z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-f][0-9a-f]))+', # URLs

    r'(?:(?:\d+,?)+(?:\.?\d+)?)', # numbers
    r"(?:[a-z][a-z'\-_]+[a-z])", # words with - and '
    r'(?:[\w_]+)', # other words
    r'(?:\S)' # anything else
]

tokens_re = re.compile(r'('+'|'.join(regex_str)+')', re.VERBOSE | re.IGNORECASE)
emoticon_re = re.compile(r'^'+emoticons_str+'$', re.VERBOSE | re.IGNORECASE)

def tokenize(s):
    return tokens_re.findall(s)

def preprocess(s, lowercase=False):
    tokens = tokenize(s)
    if lowercase:
        tokens = [token if emoticon_re.search(token) else token.lower() for token in tokens]
    return tokens

search_word = 'triggered'
com = defaultdict(lambda : defaultdict(int))
count = 0
    with open('numberfire.json', 'r') as f:
    count_only = Counter()
    count_hash = Counter()
    count_mention = Counter()
    count_search = Counter()
    for tweet in tweets: #for line in f, indent
        count += 1
        try:
            #tweet = json.loads(line)
            tweet['text'] = tweet['text'].lower()
            terms_all = [term for term in preprocess(tweet['text'])]
            terms_stop = [term for term in preprocess(tweet['text']) if term not in stop]
            terms_hash = [term for term in preprocess(tweet['text']) if term.startswith('#')]
            terms_mention = [term for term in preprocess(tweet['text']) if term.startswith('@')]
            terms_only = [term for term in preprocess(tweet['text']) if term not in stop and not term.startswith(('#', '@'))]
            for i in range(len(terms_only)-1):
                for j in range(i+1, len(terms_only)):
                    w1, w2 = sorted([terms_only[i], terms_only[j]])
                    if w1 != w2:
                        com[w1][w2] += 1
            if search_word in terms_only:
                terms_only_removed = terms_only[:]
                #terms_only_removed.remove(search_word)
                terms_only_removed = [skoo for skoo in terms_only_removed if skoo != search_word]
                count_search.update(terms_only_removed)
        except:
            continue
        terms_single = set(terms_all)
        terms_bigram = bigrams(terms_only)
        count_only.update(terms_only)
        count_hash.update(terms_hash)
        count_mention.update(terms_mention)
    print(count_only.most_common(15))
    print('\n')
    print(count_hash.most_common(15))
    print('\n')
    print(count_mention.most_common(15))
    print('\n')

com_max = []

for t1 in com:
    t1_max_terms = max(com[t1].items(), key = operator.itemgetter(1))[:10]
    for t2 in t1_max_terms:
        com_max.append(((t1, t2), com[t1][t2]))

terms_max = sorted(com_max, key = operator.itemgetter(1), reverse = True)
print(terms_max[:10])

print('\n')

print(count_search.most_common(20))


